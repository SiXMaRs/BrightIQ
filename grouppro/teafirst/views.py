from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import AuthenticationForm
from .forms import *
from .models import *
import gradio as gr
import pandas as pd
import plotly.express as px
import plotly.io as pio
from django.db.models import Sum,Count
from django.db.models.functions import TruncMonth, TruncDay
from django.shortcuts import render
import threading
import calendar



def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user) 
            return redirect('login') 
    else:
        form = RegisterForm()
    return render(request, 'user/register.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('menu')
    else:
        form = AuthenticationForm()
    return render(request, 'user/login.html', {'form': form})

def logout_view(request):
    logout(request)
    return redirect('login')

#User
@login_required(login_url='/login/')
def menu_view(request):
    menus = Menu.objects.all()
    return render(request, 'user/menu.html', {'menus': menus})

@login_required(login_url='/login/')
def add_to_cart_view(request, menu_id):
    menu = get_object_or_404(Menu, id=menu_id)
    cart_item, created = Cart.objects.get_or_create(user=request.user, menu=menu)

    if not created:
        cart_item.quantity += 1 
        cart_item.save()

    return redirect('cart')

@login_required(login_url='/login/')
def cart_view(request):
    cart_items = Cart.objects.filter(user=request.user)
    total_price = sum(item.menu.price * item.quantity for item in cart_items)
    
    return render(request, 'user/cart.html', {'cart_items': cart_items, 'total_price': total_price})

@login_required(login_url='/login/')
def update_cart_view(request, cart_id):
    cart_item = get_object_or_404(Cart, id=cart_id, user=request.user)

    if request.method == 'POST':
        action = request.POST.get('action')

        if action == "increase":
            cart_item.quantity += 1
            cart_item.save()
        elif action == "decrease":
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                cart_item.save()
            else:
                cart_item.delete()  

    return redirect('cart')

@login_required(login_url='/login/')
def order_view(request):
    cart_items = Cart.objects.filter(user=request.user)

    if not cart_items:
        return redirect('cart')
    
    for item in cart_items:
        Order.objects.create(
            user=request.user,
            menu=item.menu,
            quantity=item.quantity,
            total_price=item.menu.price * item.quantity,
            image=item.menu.image 
        )
    cart_items.delete()

    return redirect('menu')






#Admin
@login_required(login_url='/login/')
def add_menu_view(request):
    if not request.user.is_staff: 
        return redirect('menu')

    if request.method == 'POST':
        form = MenuForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('list_menu')
    else:
        form = MenuForm()
    menus = Menu.objects.all()
    return render(request, 'admin/list_menu.html', {'form': form, 'menus': menus})

@login_required(login_url='/login/')
def edit_menu_view(request):
    if not request.user.is_staff:
        return redirect('menu')

    if request.method == 'POST':
        menu_id = request.POST.get('menu_id')
        menu = get_object_or_404(Menu, id=menu_id)
        form = MenuForm(request.POST, instance=menu)
        if form.is_valid():
            form.save()
            return redirect('list_menu') 
    return redirect('list_menu')

@login_required(login_url='/login/')
def delete_menu_view(request, menu_id):
    if not request.user.is_staff:
        return redirect('menu')

    menu = get_object_or_404(Menu, id=menu_id)
    if request.method == 'POST':
        menu.delete()
        return redirect('list_menu') 

    return redirect('list_menu')

@login_required(login_url='/login/')
def order_history_view(request):
    if not request.user.is_staff:
        return redirect('menu')

    orders = Order.objects.all()  

    if request.method == 'POST':
        order_id = request.POST.get('order_id')  
        order = get_object_or_404(Order, id=order_id)  

        if order.status == 'waiting':  
            order.status = 'completed'  
            order.save()

    return render(request, 'admin/order_history.html', {'orders': orders})

@login_required(login_url='/login/')
def create_order_from_store(request):
    if not request.user.is_staff:
        return redirect('menu')  

    if request.method == 'POST':
        menu_id = request.POST.get('menu_id')  
        quantity = request.POST.get('quantity')  

        menu = Menu.objects.get(id=menu_id)
        total_price = menu.price * int(quantity)  

        Order.objects.create(
            user=request.user,
            menu=menu,
            quantity=int(quantity),
            total_price=total_price,
            status='success',  
            image=menu.image  
        )

        return redirect('order_history') 

    menus = Menu.objects.all()  
    return render(request, 'admin/order_from_store.html', {'menus': menus})


# Gradio
# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ 0)
def get_sales_data():
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö raw (values_list) ‡πÅ‡∏ó‡∏ô annotate
    raw_data = list(Order.objects.values_list("ordered_at", "total_price"))

    if not raw_data:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢!")
        return pd.DataFrame({"Day": [], "Total Sales": [], "Text Display": []})

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å raw_data
    df = pd.DataFrame(raw_data, columns=["ordered_at", "Total Sales"])

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á ordered_at ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    df["Day"] = pd.to_datetime(df["ordered_at"]).dt.strftime("%Y-%m-%d")

    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    today = pd.to_datetime("today").normalize()
    last_7_days = pd.date_range(end=today, periods=7, freq="D").strftime("%Y-%m-%d")
    
    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    df = df.groupby("Day", as_index=False)[["Total Sales"]].sum()

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0)
    df_full = pd.DataFrame({"Day": last_7_days})
    df = df_full.merge(df, on="Day", how="left").fillna({"Total Sales": 0})  # ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ 0 ‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Total Sales ‡πÄ‡∏õ‡πá‡∏ô float ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ text ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    df["Total Sales"] = df["Total Sales"].astype(float)
    df["Text Display"] = df["Total Sales"].apply(lambda x: f"{x:.2f} ‡∏ø")

    print("üìä DataFrame ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏¥‡∏° 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n", df)
    return df

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
def generate_charts():
    df = get_sales_data()

    if df.empty:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        return (
            px.bar(title="No Sales Data"), 
            "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: 0 ‡∏ø", 
            {}
        )

    df = df.reset_index(drop=True)

    total_sales_month = df["Total Sales"].sum()
    total_sales_per_day = dict(zip(df["Day"], df["Total Sales"]))

    df["Day"] = df["Day"].astype(str)

    print("üìä DataFrame ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ Plotly:\n", df.to_dict())

    # ‚úÖ Bar Chart (‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô) ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ç‡∏≠‡∏á Total Sales
    bar_chart = px.bar(
        df,
        x="Day",
        y="Total Sales",  
        title="Daily Sales (Last 7 Days)",
        text=df["Text Display"],  
        hover_data={"Text Display": True},
        category_orders={"Day": sorted(df["Day"].unique())}
    )

    bar_chart.update_xaxes(type="category", categoryorder="array", categoryarray=sorted(df["Day"].unique()))
    bar_chart.update_yaxes(type="linear", range=[0, max(df["Total Sales"].max(), 10)])  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤ Normalize
    bar_chart.update_layout(
        yaxis=dict(type="linear", range=[0, df["Total Sales"].max() + 10])  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
    )
    bar_chart.update_layout(
        title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)",  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü
        xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô X
        yaxis_title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)",  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô Y
    )
    bar_chart.update_traces(texttemplate='%{text}', textposition='outside')

    print("‚úÖ Charts Generated!")
    return (
        bar_chart,
        f"‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° 7 ‡∏ß‡∏±‡∏ô: {total_sales_month:.2f} ‡∏ø",
        total_sales_per_day
    )

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Gradio Dashboard
def gradio_dashboard():
    print("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô Gradio...")

    with gr.Blocks() as demo:
        gr.Markdown("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 7 ‡∏ß‡∏±‡∏ô")

        bar_chart, total_sales_text, _ = generate_charts()

        bar_plot = gr.Plot(bar_chart)
        total_sales_display = gr.Textbox(value=total_sales_text, interactive=False, label="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° 7 ‡∏ß‡∏±‡∏ô")

    print("‚úÖ Gradio Loaded!")
    demo.launch(server_name="127.0.0.1", server_port=7860, share=False, inline=False)

# ‚úÖ ‡∏£‡∏±‡∏ô Gradio
gradio_url = "http://127.0.0.1:7860/"
if not any(thread.name == "GradioThread" for thread in threading.enumerate()):
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô Gradio ‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï 7860")
    thread = threading.Thread(target=gradio_dashboard, daemon=True, name="GradioThread")
    thread.start()

def dashboard(request):
    return render(request, "dashboard/gradio_dashboard.html", {"gradio_url": gradio_url})